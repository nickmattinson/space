package com.mnz.game.entity.planet;

import java.awt.Graphics2D;
import java.io.IOException;
import java.util.Arrays;

import javax.imageio.ImageIO;

import com.mnz.game.GamePanel;
import com.mnz.game.entity.Entity;

/*
 *  + Name: Each planet should have a unique name to identify it within the game.
 *  + Size: This attribute can represent the planet's physical dimensions, such as 
 *      its radius or diameter. In some games, it may affect gameplay or the planet's 
 *      gravitational pull.
 *  + Mass: The mass of a planet can impact its gravitational force and interactions 
 *      with other objects.
 *  + Gravity: Planets can have varying levels of gravity, affecting player movement, 
 *      vehicle handling, and object trajectories.
 *  + Terrain: Define the planet's surface features, including landscapes, mountains, 
 *      valleys, oceans, and more. These attributes can be crucial for exploration and 
 *      gameplay mechanics.
 *  + Climate: Specify the climate or weather conditions on the planet, which can affect 
 *      gameplay, such as temperature extremes, storms, or radiation.
 *  + Atmosphere: Describe the planet's atmosphere, including its composition, pressure, 
 *      and thickness. This can affect breathing and the ability to fly or navigate on the 
 *      planet.
 *  + Temperature: Specify the average and extreme temperatures, which can influence player 
 *      survival and the planet's ecosystem.
 *  + Ecosystem: Create flora and fauna that inhabit the planet, including wildlife, plants, 
 *      and any unique species. These can affect quests, resources, and interactions.
 *  + Resources: Determine what resources are available on the planet, such as minerals, 
 *      energy sources, or rare materials. This can influence resource gathering and crafting 
 *      systems.
 *  + Civilization: Define any intelligent species or civilizations living on the planet, 
 *      including their culture, technology level, and relationship with the player.
 *  + History: Develop a history or backstory for the planet, including significant events, 
 *      ancient ruins, or mysteries that players can discover.
 *  + Quests and Missions: Planetary attributes can be tied to specific quests or missions, 
 *      such as collecting rare resources, exploring ruins, or assisting local inhabitants.
 *  + Visual Appearance: Consider the planet's visual aesthetics, including its colors, 
 *      textures, and skybox, to create an immersive gaming experience.
 *  + Unique Features: If the planet is a central location in the game, it may have unique 
 *      features or anomalies like ancient artifacts, portals, or anomalies that impact gameplay.
 *  + Day-Night Cycle: Implement a day-night cycle to create dynamic lighting conditions and 
 *      atmospheric changes.
 *  + Celestial Events: Include celestial events like meteor showers, eclipses, or planetary rings 
 *      that can enhance the planet's visual appeal.
 *  + Soundscapes: Create ambient sounds or music tracks to complement the planet's atmosphere and 
 *      set the mood.
 * 
 *  generated by chatGPT
 */

public class Planet extends Entity {
    // Declare variables / attributes
    int size;
    int mass;
    String color;
    float planetGravity;
    String terrain;
    String climate;
    String atmosphere;
    float planetMinTemperature;
    float planetAveTemperature;
    float planetMaxTemperature;
    String ecosystem;       //these might be classes themselves...
    int resourcesListLength = 20;
    String[] resources = new String[resourcesListLength];
    String civilization;    //these might be classes themselves...
    String history;         //these might be classes themselves...
    String missions;        //these might be classes themselves...
    int uniqueListLength = 20;
    String[] uniqueFeatures = new String[uniqueListLength];
    boolean isDay;      //true = day      false = night

    String bluePlanetPath = "/planets/blue_planet.png";
    String purplePlanetPath = "/planets/purple_planet.png";

    GamePanel gp;

    public Planet(GamePanel gp) {
        this.gp = gp;
        getPlanetImage(bluePlanetPath);

    }


    // Methods
    public void applyPlanetGravitationalForce(){
        //apply Planet's gravity to object
    }

    // Getters and setters


    public void setSize(int size) {
        this.size = size;
    }

    public int getMass() {
        return mass;
    }

    public void setMass(int mass) {
        this.mass = mass;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public float getPlanetGravity() {
        return planetGravity;
    }

    public void setPlanetGravity(float planetGravity) {
        this.planetGravity = planetGravity;
    }

    public String getTerrain() {
        return terrain;
    }

    public void setTerrain(String terrain) {
        this.terrain = terrain;
    }

    public String getClimate() {
        return climate;
    }

    public void setClimate(String climate) {
        this.climate = climate;
    }

    public String getAtmosphere() {
        return atmosphere;
    }

    public void setAtmosphere(String atmosphere) {
        this.atmosphere = atmosphere;
    }

    public float getPlanetMinTemperature() {
        return planetMinTemperature;
    }

    public void setPlanetMinTemperature(float planetMinTemperature) {
        this.planetMinTemperature = planetMinTemperature;
    }

    public float getPlanetAveTemperature() {
        return planetAveTemperature;
    }

    public void setPlanetAveTemperature(float planetAveTemperature) {
        this.planetAveTemperature = planetAveTemperature;
    }

    public float getPlanetMaxTemperature() {
        return planetMaxTemperature;
    }

    public void setPlanetMaxTemperature(float planetMaxTemperature) {
        this.planetMaxTemperature = planetMaxTemperature;
    }

    public String getEcosystem() {
        return ecosystem;
    }

    public void setEcosystem(String ecosystem) {
        this.ecosystem = ecosystem;
    }

    public int getResourcesListLength() {
        return resourcesListLength;
    }

    public void setResourcesListLength(int resourcesListLength) {
        this.resourcesListLength = resourcesListLength;
    }

    public String[] getResources() {
        return resources;
    }

    public void setResources(String[] resources) {
        this.resources = resources;
    }

    public String getCivilization() {
        return civilization;
    }

    public void setCivilization(String civilization) {
        this.civilization = civilization;
    }

    public String getHistory() {
        return history;
    }

    public void setHistory(String history) {
        this.history = history;
    }

    public String getMissions() {
        return missions;
    }

    public void setMissions(String missions) {
        this.missions = missions;
    }

    public int getUniqueListLength() {
        return uniqueListLength;
    }

    public void setUniqueListLength(int uniqueListLength) {
        this.uniqueListLength = uniqueListLength;
    }

    public String[] getUniqueFeatures() {
        return uniqueFeatures;
    }

    public void setUniqueFeatures(String[] uniqueFeatures) {
        this.uniqueFeatures = uniqueFeatures;
    }

    public boolean isDay() {
        return isDay;
    }

    public void setDay(boolean isDay) {
        this.isDay = isDay;
    }

    // Generate toString Method
    @Override
    public String toString() {
        return "Planet [size=" + size + ", mass=" + mass + ", color=" + color + ", planetGravity=" + planetGravity
                + ", terrain=" + terrain + ", climate=" + climate + ", atmosphere=" + atmosphere
                + ", planetMinTemperature=" + planetMinTemperature + ", planetAveTemperature=" + planetAveTemperature
                + ", planetMaxTemperature=" + planetMaxTemperature + ", ecosystem=" + ecosystem
                + ", resourcesListLength=" + resourcesListLength + ", resources=" + Arrays.toString(resources)
                + ", civilization=" + civilization + ", history=" + history + ", missions=" + missions
                + ", uniqueListLength=" + uniqueListLength + ", uniqueFeatures=" + Arrays.toString(uniqueFeatures)
                + ", isDay=" + isDay + "]";
    }

    public void getPlanetImage(String planetPath) {
        try {
            up1 = ImageIO.read(getClass().getResourceAsStream(planetPath));
            //up1 = ImageIO.read(getClass().getResource("resources/player/ship_1.png"));

            up2 = up1;
            down1 = up1;
            down2 = up1;
            left1 = up1;
            left2 = up1;
            right1 = up1;
            right2 = up1;

        } catch(IOException e) {
            e.printStackTrace();

        }
    }

    public void update() {}

    public void draw(Graphics2D g2) {
        int w = up1.getWidth(null);
        int h = up1.getHeight(null);
        g2.drawImage(up1, x,y,w, h, null);
        g2.dispose();

    }

    public static void main(String[] args){
        // test toString() method
        GamePanel gp = new GamePanel();
        Planet p = new Planet(gp);
        p.setName("Test planet");
        p.setX(300);
        p.setY(300);
        System.out.println(p.toString());  // output to debug console

    }


}
